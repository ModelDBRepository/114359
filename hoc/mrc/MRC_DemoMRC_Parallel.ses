objectvar save_window_, rvp_
objectvar scene_vector_[4]
objectvar ocbox_, ocbox_list_, scene_, scene_list_
{ocbox_list_ = new List()  scene_list_ = new List()}

// Start session file snippet
X=0
Y=0
// Start manually added code for defining a block
// Be aware that the upper_limit, lower_limit and stepsize variables are not
// available outside an MRC_LoopParameter and that MRCSlice is not available
// inside an MRC_LoopParameter. Only MRC_SliceNo, MRC_SliceIndex,MRC_StepsInSlice
// are available and shared between all loop parameters and the outside world
//
// Allocate MRC_SliceIndex and MRC_StepsInSlice
double MRC_SliceIndex[2]
double MRC_StepsInSlice[2]
double MRC_NoOfSlices[2]
MRC_NoOfSlices[0]=4
MRC_NoOfSlices[1]=5

// End manually added code for defining a block

//Begin MultipleRunControlGUI[0]
{
load_file("MultipleRunControl.hoc","MultipleRunControlGUI")
}



{
ocbox_ = new MultipleRunControlGUI(1)
}
{object_push(ocbox_)}
{
file_name="DemoOutput/Sim"
file_index_start=0
}
{tobj=new MRC_Protocol()}
	{object_push(tobj)}
	{
		output_matlab_mfile=1
		output_neuronbinary=1
		output_axontextfile=0
	}
	{object_pop()}

{protocol=tobj}
{tobj=new MRC_LoopParameter()}
	{object_push(tobj)}
	{
		name="X"
		lower_limit=1000
		upper_limit=1999
		stepsize=1
		use=1
		
		// Start manually added code for defining a block
		MRC_StepsInSlice[0]=(upper_limit-lower_limit+stepsize)/(MRC_NoOfSlices[0]*stepsize) // This number should be an integer
		MRC_SliceIndex[0]=MRC_GetIndex(2,MRC_SliceNo,2)//int(MRC_SliceNo/MRC_NoOfSlices[1])
		restart=2  	 // restart=2 indicates that we are using slicing 
        restart_at=lower_limit+ MRC_SliceIndex[0]*MRC_StepsInSlice[0]*stepsize
        end_before=lower_limit+ (MRC_SliceIndex[0]+1)*MRC_StepsInSlice[0]*stepsize
		// End manually added code for defining a block	 
		
		setdisplaytext()
	}
	{object_pop()}

{looppars.append(tobj)}
{tobj=new MRC_LoopParameter()}
	{object_push(tobj)}
	{
		name="Y"
		lower_limit=7
		upper_limit=10
		stepsize=0.75
		use=1
		
		// Start manually added code for defining a block
		MRC_StepsInSlice[1]=(upper_limit-lower_limit+stepsize)/(MRC_NoOfSlices[1]*stepsize) // This number should be an integer
		MRC_SliceIndex[1]=MRC_GetIndex(2,MRC_SliceNo,2)//int(MRC_SliceNo-MRC_NoOfSlices[1]*MRC_SliceIndex[0])
		restart=2  	 // restart=2 indicates that we are using slicing 
        restart_at=lower_limit+ MRC_SliceIndex[1]*MRC_StepsInSlice[1]*stepsize
        end_before=lower_limit+ (MRC_SliceIndex[1]+1)*MRC_StepsInSlice[1]*stepsize
		// End manually added code for defining a block
		setdisplaytext()
	}
	{object_pop()}

{looppars.append(tobj)}
{tobj1=types_outpar.gettypefromindex(3)}
{tobj=new MRC_OutputVariable("X",tobj1,protocol)}
	{object_push(tobj)}
	{
		use=1
		setdisplaytext()
	}
	{object_pop()}
{tobj1=tobj.gethandler()}
	{object_push(tobj1)}
	{
		scalarname="X"
		shortname="X"
	}
	{object_pop()}

{outpars.append(tobj)}
{tobj1=types_outpar.gettypefromindex(3)}
{tobj=new MRC_OutputVariable("Y",tobj1,protocol)}
	{object_push(tobj)}
	{
		use=1
		setdisplaytext()
	}
	{object_pop()}
{tobj1=tobj.gethandler()}
	{object_push(tobj1)}
	{
		scalarname="Y"
		shortname="Y"
	}
	{object_pop()}

{outpars.append(tobj)}
{object_pop()}
{
ocbox_.map("MultipleRunControlGUI[0]", 517, 238, 732.48, 773.76)
}
objref ocbox_
//End MultipleRunControlGUI[0]

objectvar scene_vector_[1]
{doNotify()}


//if(name_declared("MRC_Slice")==5){
// execute("looprun()",MultipleRunControlGUI[0])
//}
